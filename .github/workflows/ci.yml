name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Format check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy

    - name: Install LLVM linker
      run: sudo apt-get update && sudo apt-get install -y lld
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Run tests (excluding examples)
      run: |
        # Test only the main crates, excluding examples
        # Skip network-dependent tests by setting environment variable
        # Skip doctests due to dependency version conflicts
        SKIP_NETWORK_TESTS=1 cargo test --workspace --exclude examples --lib --bins
    
    - name: Run clippy
      run: cargo clippy --workspace --exclude examples -- -W warnings

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install LLVM linker
      run: sudo apt-get update && sudo apt-get install -y lld

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-
    
    - name: Build (excluding examples)
      run: cargo build --workspace --exclude examples --release
